# Lab 6: Multithread performance

Here we are going to test the performance advantage of multithreaded sort. First 
we need to generate a testing file big enough so that the sort program would 
actually take a measureable amount of time to finish the task.

```bash
od -A n -t fF -N 40000000 < /dev/urandom |
tr -s '[:blank:]' '[\n*]' |
sed '/^$/d' >
rand_flost.txt
```

In the above commands, `od` extract 40000000 bytes from /dev/urandom, which 
generates random bytes, and format them into 10000000 floating point numbers.

Then we can start using `time` to measure the performance of the programs. 
Here are the results:

```bash
$ time -p sort -g rand_floats.txt > /dev/null
real 21.54
user 119.86
sys 0.45

$ time -p sort --parallel=1 -g rand_floats.txt > /dev/null
real 102.32
user 102.12
sys 0.18

$ time -p sort --parallel=2 -g rand_floats.txt > /dev/null
real 54.19
user 102.96
sys 0.30

$ time -p sort --parallel=4 -g rand_floats.txt > /dev/null
real 31.53
user 106.38
sys 0.34

$ time -p sort --parallel=8 -g rand_floats.txt > /dev/null
real 20.09
user 109.51
sys 0.42
```

A few observations can be made. First, we see that the original `sort` itself has 
certain level of parallel optimization built in; the real execution time is 
only a fraction of the user CPU time. Though the `sort` with `--parallel=8` 
option did performance a bit better, the difference is minuscule.

Second, as the number of thread increases, the user CPU time and system CPU 
time also increased, though negligible compared to the overall performance gain.